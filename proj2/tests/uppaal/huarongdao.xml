<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
int chess[5][4] = { \
                 {6, 6, 2, 0}, \
                 {1, 1, 2, 0}, \
                 {1, 1, 4, 7}, \
                 {7, 3, 4, 5}, \
                 {7, 3, 7, 5}};</declaration>
	<template>
		<name x="5" y="5">CC</name>
		<declaration>// Place local declarations here.
int row[2] = {1, 2};
int col[2] = {0, 1};

void move_up(){
    if (row[0] &lt;= 0) {
        return;
    }
    if (chess[row[0]-1][col[0]] != 0 || chess[row[0]-1][col[1]] != 0) {
        return;
    }
    
    chess[row[1]][col[0]] = 0;
    chess[row[1]][col[1]] = 0;

    row[0] = row[0] - 1;
    row[1] = row[1] - 1;

    chess[row[0]][col[0]] = 1;
    chess[row[0]][col[1]] = 1;
}

void move_down() {
    if (row[1] &gt;= 4) {
        return;
    }
    if (chess[row[1]+1][col[0]] != 0 || chess[row[1]+1][col[1]] != 0) {
        return;
    }
    
    chess[row[0]][col[0]] = 0;
    chess[row[0]][col[1]] = 0;

    row[0] = row[0] + 1;
    row[1] = row[1] + 1;

    chess[row[1]][col[0]] = 1;
    chess[row[1]][col[1]] = 1;
}

void move_left() {
    if (col[0] &lt;= 0) {
        return;
    }
    if (chess[row[0]][col[0]-1] != 0 || chess[row[1]][col[0]-1] != 0) {
        return;
    }
    
    chess[row[0]][col[1]] = 0;
    chess[row[1]][col[1]] = 0;
    
    col[0] = col[0] - 1;
    col[1] = col[1] - 1;
    
    chess[row[0]][col[0]] = 1;
    chess[row[1]][col[0]] = 1;
}

void move_right() {
    if (col[1] &gt;= 3) {
        return;
    }
    if (chess[row[0]][col[1]+1] != 0 || chess[row[1]][col[1]+1] != 0) {
        return;
    }

    chess[row[0]][col[0]] = 0;
    chess[row[1]][col[0]] = 0;

    col[0] = col[0] + 1;
    col[1] = col[1] + 1;

    chess[row[0]][col[1]] = 1;
    chess[row[1]][col[1]] = 1;
}</declaration>
		<location id="id0" x="0" y="0">
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="assignment" x="-67" y="17">move_left()</label>
			<nail x="-85" y="34"/>
			<nail x="-85" y="-25"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="assignment" x="17" y="38">move_down()</label>
			<nail x="34" y="76"/>
			<nail x="-25" y="76"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="assignment" x="18" y="-17">move_right()</label>
			<nail x="85" y="-34"/>
			<nail x="85" y="25"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="assignment" x="-24" y="-85">move_up()</label>
			<nail x="-42" y="-85"/>
			<nail x="34" y="-85"/>
		</transition>
	</template>
	<template>
		<name>ZF2</name>
		<declaration>// Place local declarations here.
int row[2] = {0, 1};
int col[2] = {2, 2};

void move_up(){
    if (row[0] &lt;= 0) {
        return;
    }
    if (chess[row[0]-1][col[0]] != 0 || chess[row[0]-1][col[1]] != 0) {
        return;
    }
    
    chess[row[1]][col[0]] = 0;
    chess[row[1]][col[1]] = 0;

    row[0] = row[0] - 1;
    row[1] = row[1] - 1;

    chess[row[0]][col[0]] = 2;
    chess[row[0]][col[1]] = 2;
}

void move_down() {
    if (row[1] &gt;= 4) {
        return;
    }
    if (chess[row[1]+1][col[0]] != 0 || chess[row[1]+1][col[1]] != 0) {
        return;
    }
    
    chess[row[0]][col[0]] = 0;
    chess[row[0]][col[1]] = 0;

    row[0] = row[0] + 1;
    row[1] = row[1] + 1;

    chess[row[1]][col[0]] = 2;
    chess[row[1]][col[1]] = 2;
}

void move_left() {
    if (col[0] &lt;= 0) {
        return;
    }
    if (chess[row[0]][col[0]-1] != 0 || chess[row[1]][col[0]-1] != 0) {
        return;
    }
    
    chess[row[0]][col[1]] = 0;
    chess[row[1]][col[1]] = 0;
    
    col[0] = col[0] - 1;
    col[1] = col[1] - 1;
    
    chess[row[0]][col[0]] = 2;
    chess[row[1]][col[0]] = 2;
}

void move_right() {
    if (col[1] &gt;= 3) {
        return;
    }
    if (chess[row[0]][col[1]+1] != 0 || chess[row[1]][col[1]+1] != 0) {
        return;
    }

    chess[row[0]][col[0]] = 0;
    chess[row[1]][col[0]] = 0;

    col[0] = col[0] + 1;
    col[1] = col[1] + 1;

    chess[row[0]][col[1]] = 2;
    chess[row[1]][col[1]] = 2;
}</declaration>
		<location id="id1" x="0" y="0">
		</location>
		<init ref="id1"/>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="assignment" x="-67" y="17">move_left()</label>
			<nail x="-85" y="34"/>
			<nail x="-85" y="-25"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="assignment" x="17" y="38">move_down()</label>
			<nail x="34" y="76"/>
			<nail x="-25" y="76"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="assignment" x="18" y="-17">move_right()</label>
			<nail x="85" y="-34"/>
			<nail x="85" y="25"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="assignment" x="-24" y="-85">move_up()</label>
			<nail x="-42" y="-85"/>
			<nail x="34" y="-85"/>
		</transition>
	</template>
	<template>
		<name>MC3</name>
		<declaration>// Place local declarations here.
int row[2] = {3, 4};
int col[2] = {1, 1};

void move_up(){
    if (row[0] &lt;= 0) {
        return;
    }
    if (chess[row[0]-1][col[0]] != 0 || chess[row[0]-1][col[1]] != 0) {
        return;
    }
    
    chess[row[1]][col[0]] = 0;
    chess[row[1]][col[1]] = 0;

    row[0] = row[0] - 1;
    row[1] = row[1] - 1;

    chess[row[0]][col[0]] = 3;
    chess[row[0]][col[1]] = 3;
}

void move_down() {
    if (row[1] &gt;= 4) {
        return;
    }
    if (chess[row[1]+1][col[0]] != 0 || chess[row[1]+1][col[1]] != 0) {
        return;
    }
    
    chess[row[0]][col[0]] = 0;
    chess[row[0]][col[1]] = 0;

    row[0] = row[0] + 1;
    row[1] = row[1] + 1;

    chess[row[1]][col[0]] = 3;
    chess[row[1]][col[1]] = 3;
}

void move_left() {
    if (col[0] &lt;= 0) {
        return;
    }
    if (chess[row[0]][col[0]-1] != 0 || chess[row[1]][col[0]-1] != 0) {
        return;
    }
    
    chess[row[0]][col[1]] = 0;
    chess[row[1]][col[1]] = 0;
    
    col[0] = col[0] - 1;
    col[1] = col[1] - 1;
    
    chess[row[0]][col[0]] = 3;
    chess[row[1]][col[0]] = 3;
}

void move_right() {
    if (col[1] &gt;= 3) {
        return;
    }
    if (chess[row[0]][col[1]+1] != 0 || chess[row[1]][col[1]+1] != 0) {
        return;
    }

    chess[row[0]][col[0]] = 0;
    chess[row[1]][col[0]] = 0;

    col[0] = col[0] + 1;
    col[1] = col[1] + 1;

    chess[row[0]][col[1]] = 3;
    chess[row[1]][col[1]] = 3;
}</declaration>
		<location id="id2" x="0" y="0">
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="assignment" x="-67" y="17">move_left()</label>
			<nail x="-85" y="34"/>
			<nail x="-85" y="-25"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="assignment" x="17" y="38">move_down()</label>
			<nail x="34" y="76"/>
			<nail x="-25" y="76"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="assignment" x="18" y="-17">move_right()</label>
			<nail x="85" y="-34"/>
			<nail x="85" y="25"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="assignment" x="-24" y="-85">move_up()</label>
			<nail x="-42" y="-85"/>
			<nail x="34" y="-85"/>
		</transition>
	</template>
	<template>
		<name>ZY4</name>
		<declaration>// Place local declarations here.
int row[2] = {2, 3};
int col[2] = {2, 2};

void move_up(){
    if (row[0] &lt;= 0) {
        return;
    }
    if (chess[row[0]-1][col[0]] != 0 || chess[row[0]-1][col[1]] != 0) {
        return;
    }
    
    chess[row[1]][col[0]] = 0;
    chess[row[1]][col[1]] = 0;

    row[0] = row[0] - 1;
    row[1] = row[1] - 1;

    chess[row[0]][col[0]] = 4;
    chess[row[0]][col[1]] = 4;
}

void move_down() {
    if (row[1] &gt;= 4) {
        return;
    }
    if (chess[row[1]+1][col[0]] != 0 || chess[row[1]+1][col[1]] != 0) {
        return;
    }
    
    chess[row[0]][col[0]] = 0;
    chess[row[0]][col[1]] = 0;

    row[0] = row[0] + 1;
    row[1] = row[1] + 1;

    chess[row[1]][col[0]] = 4;
    chess[row[1]][col[1]] = 4;
}

void move_left() {
    if (col[0] &lt;= 0) {
        return;
    }
    if (chess[row[0]][col[0]-1] != 0 || chess[row[1]][col[0]-1] != 0) {
        return;
    }
    
    chess[row[0]][col[1]] = 0;
    chess[row[1]][col[1]] = 0;
    
    col[0] = col[0] - 1;
    col[1] = col[1] - 1;
    
    chess[row[0]][col[0]] = 4;
    chess[row[1]][col[0]] = 4;
}

void move_right() {
    if (col[1] &gt;= 3) {
        return;
    }
    if (chess[row[0]][col[1]+1] != 0 || chess[row[1]][col[1]+1] != 0) {
        return;
    }

    chess[row[0]][col[0]] = 0;
    chess[row[1]][col[0]] = 0;

    col[0] = col[0] + 1;
    col[1] = col[1] + 1;

    chess[row[0]][col[1]] = 4;
    chess[row[1]][col[1]] = 4;
}</declaration>
		<location id="id3" x="0" y="0">
		</location>
		<init ref="id3"/>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="assignment" x="-67" y="17">move_left()</label>
			<nail x="-85" y="34"/>
			<nail x="-85" y="-25"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="assignment" x="17" y="38">move_down()</label>
			<nail x="34" y="76"/>
			<nail x="-25" y="76"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="assignment" x="18" y="-17">move_right()</label>
			<nail x="85" y="-34"/>
			<nail x="85" y="25"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="assignment" x="-24" y="-85">move_up()</label>
			<nail x="-42" y="-85"/>
			<nail x="34" y="-85"/>
		</transition>
	</template>
	<template>
		<name>HZ5</name>
		<declaration>// Place local declarations here.
int row[2] = {3, 4};
int col[2] = {3, 3};

void move_up(){
    if (row[0] &lt;= 0) {
        return;
    }
    if (chess[row[0]-1][col[0]] != 0 || chess[row[0]-1][col[1]] != 0) {
        return;
    }
    
    chess[row[1]][col[0]] = 0;
    chess[row[1]][col[1]] = 0;

    row[0] = row[0] - 1;
    row[1] = row[1] - 1;

    chess[row[0]][col[0]] = 5;
    chess[row[0]][col[1]] = 5;
}

void move_down() {
    if (row[1] &gt;= 4) {
        return;
    }
    if (chess[row[1]+1][col[0]] != 0 || chess[row[1]+1][col[1]] != 0) {
        return;
    }
    
    chess[row[0]][col[0]] = 0;
    chess[row[0]][col[1]] = 0;

    row[0] = row[0] + 1;
    row[1] = row[1] + 1;

    chess[row[1]][col[0]] = 5;
    chess[row[1]][col[1]] = 5;
}

void move_left() {
    if (col[0] &lt;= 0) {
        return;
    }
    if (chess[row[0]][col[0]-1] != 0 || chess[row[1]][col[0]-1] != 0) {
        return;
    }
    
    chess[row[0]][col[1]] = 0;
    chess[row[1]][col[1]] = 0;
    
    col[0] = col[0] - 1;
    col[1] = col[1] - 1;
    
    chess[row[0]][col[0]] = 5;
    chess[row[1]][col[0]] = 5;
}

void move_right() {
    if (col[1] &gt;= 3) {
        return;
    }
    if (chess[row[0]][col[1]+1] != 0 || chess[row[1]][col[1]+1] != 0) {
        return;
    }

    chess[row[0]][col[0]] = 0;
    chess[row[1]][col[0]] = 0;

    col[0] = col[0] + 1;
    col[1] = col[1] + 1;

    chess[row[0]][col[1]] = 5;
    chess[row[1]][col[1]] = 5;
}</declaration>
		<location id="id4" x="0" y="0">
		</location>
		<init ref="id4"/>
		<transition>
			<source ref="id4"/>
			<target ref="id4"/>
			<label kind="assignment" x="-67" y="17">move_left()</label>
			<nail x="-85" y="34"/>
			<nail x="-85" y="-25"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id4"/>
			<label kind="assignment" x="17" y="38">move_down()</label>
			<nail x="34" y="76"/>
			<nail x="-25" y="76"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id4"/>
			<label kind="assignment" x="18" y="-17">move_right()</label>
			<nail x="85" y="-34"/>
			<nail x="85" y="25"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id4"/>
			<label kind="assignment" x="-24" y="-85">move_up()</label>
			<nail x="-42" y="-85"/>
			<nail x="34" y="-85"/>
		</transition>
	</template>
	<template>
		<name>GY6</name>
		<declaration>// Place local declarations here.
int row[2] = {0, 0};
int col[2] = {0, 1};

void move_up(){
    if (row[0] &lt;= 0) {
        return;
    }
    if (chess[row[0]-1][col[0]] != 0 || chess[row[0]-1][col[1]] != 0) {
        return;
    }
    
    chess[row[1]][col[0]] = 0;
    chess[row[1]][col[1]] = 0;

    row[0] = row[0] - 1;
    row[1] = row[1] - 1;

    chess[row[0]][col[0]] = 6;
    chess[row[0]][col[1]] = 6;
}

void move_down() {
    if (row[1] &gt;= 4) {
        return;
    }
    if (chess[row[1]+1][col[0]] != 0 || chess[row[1]+1][col[1]] != 0) {
        return;
    }
    
    chess[row[0]][col[0]] = 0;
    chess[row[0]][col[1]] = 0;

    row[0] = row[0] + 1;
    row[1] = row[1] + 1;

    chess[row[1]][col[0]] = 6;
    chess[row[1]][col[1]] = 6;
}

void move_left() {
    if (col[0] &lt;= 0) {
        return;
    }
    if (chess[row[0]][col[0]-1] != 0 || chess[row[1]][col[0]-1] != 0) {
        return;
    }
    
    chess[row[0]][col[1]] = 0;
    chess[row[1]][col[1]] = 0;
    
    col[0] = col[0] - 1;
    col[1] = col[1] - 1;
    
    chess[row[0]][col[0]] = 6;
    chess[row[1]][col[0]] = 6;
}

void move_right() {
    if (col[1] &gt;= 3) {
        return;
    }
    if (chess[row[0]][col[1]+1] != 0 || chess[row[1]][col[1]+1] != 0) {
        return;
    }

    chess[row[0]][col[0]] = 0;
    chess[row[1]][col[0]] = 0;

    col[0] = col[0] + 1;
    col[1] = col[1] + 1;

    chess[row[0]][col[1]] = 6;
    chess[row[1]][col[1]] = 6;
}</declaration>
		<location id="id5" x="0" y="0">
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id5"/>
			<target ref="id5"/>
			<label kind="assignment" x="-67" y="17">move_left()</label>
			<nail x="-85" y="34"/>
			<nail x="-85" y="-25"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id5"/>
			<label kind="assignment" x="17" y="38">move_down()</label>
			<nail x="34" y="76"/>
			<nail x="-25" y="76"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id5"/>
			<label kind="assignment" x="18" y="-17">move_right()</label>
			<nail x="85" y="-34"/>
			<nail x="85" y="25"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id5"/>
			<label kind="assignment" x="-24" y="-85">move_up()</label>
			<nail x="-42" y="-85"/>
			<nail x="34" y="-85"/>
		</transition>
	</template>
	<template>
		<name>S1</name>
		<declaration>// Place local declarations here.
int row[2] = {2, 2};
int col[2] = {3, 3};

void move_up(){
    if (row[0] &lt;= 0) {
        return;
    }
    if (chess[row[0]-1][col[0]] != 0 || chess[row[0]-1][col[1]] != 0) {
        return;
    }
    
    chess[row[1]][col[0]] = 0;
    chess[row[1]][col[1]] = 0;

    row[0] = row[0] - 1;
    row[1] = row[1] - 1;

    chess[row[0]][col[0]] = 7;
    chess[row[0]][col[1]] = 7;
}

void move_down() {
    if (row[1] &gt;= 4) {
        return;
    }
    if (chess[row[1]+1][col[0]] != 0 || chess[row[1]+1][col[1]] != 0) {
        return;
    }
    
    chess[row[0]][col[0]] = 0;
    chess[row[0]][col[1]] = 0;

    row[0] = row[0] + 1;
    row[1] = row[1] + 1;

    chess[row[1]][col[0]] = 7;
    chess[row[1]][col[1]] = 7;
}

void move_left() {
    if (col[0] &lt;= 0) {
        return;
    }
    if (chess[row[0]][col[0]-1] != 0 || chess[row[1]][col[0]-1] != 0) {
        return;
    }
    
    chess[row[0]][col[1]] = 0;
    chess[row[1]][col[1]] = 0;
    
    col[0] = col[0] - 1;
    col[1] = col[1] - 1;
    
    chess[row[0]][col[0]] = 7;
    chess[row[1]][col[0]] = 7;
}

void move_right() {
    if (col[1] &gt;= 3) {
        return;
    }
    if (chess[row[0]][col[1]+1] != 0 || chess[row[1]][col[1]+1] != 0) {
        return;
    }

    chess[row[0]][col[0]] = 0;
    chess[row[1]][col[0]] = 0;

    col[0] = col[0] + 1;
    col[1] = col[1] + 1;

    chess[row[0]][col[1]] = 7;
    chess[row[1]][col[1]] = 7;
}</declaration>
		<location id="id6" x="0" y="0">
		</location>
		<init ref="id6"/>
		<transition>
			<source ref="id6"/>
			<target ref="id6"/>
			<label kind="assignment" x="-67" y="17">move_left()</label>
			<nail x="-85" y="34"/>
			<nail x="-85" y="-25"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id6"/>
			<label kind="assignment" x="17" y="38">move_down()</label>
			<nail x="34" y="76"/>
			<nail x="-25" y="76"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id6"/>
			<label kind="assignment" x="18" y="-17">move_right()</label>
			<nail x="85" y="-34"/>
			<nail x="85" y="25"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id6"/>
			<label kind="assignment" x="-24" y="-85">move_up()</label>
			<nail x="-42" y="-85"/>
			<nail x="34" y="-85"/>
		</transition>
	</template>
	<template>
		<name>S2</name>
		<declaration>// Place local declarations here.
int row[2] = {3, 3};
int col[2] = {0, 0};

void move_up(){
    if (row[0] &lt;= 0) {
        return;
    }
    if (chess[row[0]-1][col[0]] != 0 || chess[row[0]-1][col[1]] != 0) {
        return;
    }
    
    chess[row[1]][col[0]] = 0;
    chess[row[1]][col[1]] = 0;

    row[0] = row[0] - 1;
    row[1] = row[1] - 1;

    chess[row[0]][col[0]] = 7;
    chess[row[0]][col[1]] = 7;
}

void move_down() {
    if (row[1] &gt;= 4) {
        return;
    }
    if (chess[row[1]+1][col[0]] != 0 || chess[row[1]+1][col[1]] != 0) {
        return;
    }
    
    chess[row[0]][col[0]] = 0;
    chess[row[0]][col[1]] = 0;

    row[0] = row[0] + 1;
    row[1] = row[1] + 1;

    chess[row[1]][col[0]] = 7;
    chess[row[1]][col[1]] = 7;
}

void move_left() {
    if (col[0] &lt;= 0) {
        return;
    }
    if (chess[row[0]][col[0]-1] != 0 || chess[row[1]][col[0]-1] != 0) {
        return;
    }
    
    chess[row[0]][col[1]] = 0;
    chess[row[1]][col[1]] = 0;
    
    col[0] = col[0] - 1;
    col[1] = col[1] - 1;
    
    chess[row[0]][col[0]] = 7;
    chess[row[1]][col[0]] = 7;
}

void move_right() {
    if (col[1] &gt;= 3) {
        return;
    }
    if (chess[row[0]][col[1]+1] != 0 || chess[row[1]][col[1]+1] != 0) {
        return;
    }

    chess[row[0]][col[0]] = 0;
    chess[row[1]][col[0]] = 0;

    col[0] = col[0] + 1;
    col[1] = col[1] + 1;

    chess[row[0]][col[1]] = 7;
    chess[row[1]][col[1]] = 7;
}</declaration>
		<location id="id7" x="0" y="0">
		</location>
		<init ref="id7"/>
		<transition>
			<source ref="id7"/>
			<target ref="id7"/>
			<label kind="assignment" x="-67" y="17">move_left()</label>
			<nail x="-85" y="34"/>
			<nail x="-85" y="-25"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id7"/>
			<label kind="assignment" x="17" y="38">move_down()</label>
			<nail x="34" y="76"/>
			<nail x="-25" y="76"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id7"/>
			<label kind="assignment" x="18" y="-17">move_right()</label>
			<nail x="85" y="-34"/>
			<nail x="85" y="25"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id7"/>
			<label kind="assignment" x="-24" y="-85">move_up()</label>
			<nail x="-42" y="-85"/>
			<nail x="34" y="-85"/>
		</transition>
	</template>
	<template>
		<name>S3</name>
		<declaration>// Place local declarations here.
int row[2] = {4, 4};
int col[2] = {0, 0};

void move_up(){
    if (row[0] &lt;= 0) {
        return;
    }
    if (chess[row[0]-1][col[0]] != 0 || chess[row[0]-1][col[1]] != 0) {
        return;
    }
    
    chess[row[1]][col[0]] = 0;
    chess[row[1]][col[1]] = 0;

    row[0] = row[0] - 1;
    row[1] = row[1] - 1;

    chess[row[0]][col[0]] = 7;
    chess[row[0]][col[1]] = 7;
}

void move_down() {
    if (row[1] &gt;= 4) {
        return;
    }
    if (chess[row[1]+1][col[0]] != 0 || chess[row[1]+1][col[1]] != 0) {
        return;
    }
    
    chess[row[0]][col[0]] = 0;
    chess[row[0]][col[1]] = 0;

    row[0] = row[0] + 1;
    row[1] = row[1] + 1;

    chess[row[1]][col[0]] = 7;
    chess[row[1]][col[1]] = 7;
}

void move_left() {
    if (col[0] &lt;= 0) {
        return;
    }
    if (chess[row[0]][col[0]-1] != 0 || chess[row[1]][col[0]-1] != 0) {
        return;
    }
    
    chess[row[0]][col[1]] = 0;
    chess[row[1]][col[1]] = 0;
    
    col[0] = col[0] - 1;
    col[1] = col[1] - 1;
    
    chess[row[0]][col[0]] = 7;
    chess[row[1]][col[0]] = 7;
}

void move_right() {
    if (col[1] &gt;= 3) {
        return;
    }
    if (chess[row[0]][col[1]+1] != 0 || chess[row[1]][col[1]+1] != 0) {
        return;
    }

    chess[row[0]][col[0]] = 0;
    chess[row[1]][col[0]] = 0;

    col[0] = col[0] + 1;
    col[1] = col[1] + 1;

    chess[row[0]][col[1]] = 7;
    chess[row[1]][col[1]] = 7;
}</declaration>
		<location id="id8" x="0" y="0">
		</location>
		<init ref="id8"/>
		<transition>
			<source ref="id8"/>
			<target ref="id8"/>
			<label kind="assignment" x="-67" y="17">move_left()</label>
			<nail x="-85" y="34"/>
			<nail x="-85" y="-25"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id8"/>
			<label kind="assignment" x="17" y="38">move_down()</label>
			<nail x="34" y="76"/>
			<nail x="-25" y="76"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id8"/>
			<label kind="assignment" x="18" y="-17">move_right()</label>
			<nail x="85" y="-34"/>
			<nail x="85" y="25"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id8"/>
			<label kind="assignment" x="-24" y="-85">move_up()</label>
			<nail x="-42" y="-85"/>
			<nail x="34" y="-85"/>
		</transition>
	</template>
	<template>
		<name>S4</name>
		<declaration>// Place local declarations here.
int row[2] = {4, 4};
int col[2] = {2, 2};

void move_up(){
    if (row[0] &lt;= 0) {
        return;
    }
    if (chess[row[0]-1][col[0]] != 0 || chess[row[0]-1][col[1]] != 0) {
        return;
    }
    
    chess[row[1]][col[0]] = 0;
    chess[row[1]][col[1]] = 0;

    row[0] = row[0] - 1;
    row[1] = row[1] - 1;

    chess[row[0]][col[0]] = 7;
    chess[row[0]][col[1]] = 7;
}

void move_down() {
    if (row[1] &gt;= 4) {
        return;
    }
    if (chess[row[1]+1][col[0]] != 0 || chess[row[1]+1][col[1]] != 0) {
        return;
    }
    
    chess[row[0]][col[0]] = 0;
    chess[row[0]][col[1]] = 0;

    row[0] = row[0] + 1;
    row[1] = row[1] + 1;

    chess[row[1]][col[0]] = 7;
    chess[row[1]][col[1]] = 7;
}

void move_left() {
    if (col[0] &lt;= 0) {
        return;
    }
    if (chess[row[0]][col[0]-1] != 0 || chess[row[1]][col[0]-1] != 0) {
        return;
    }
    
    chess[row[0]][col[1]] = 0;
    chess[row[1]][col[1]] = 0;
    
    col[0] = col[0] - 1;
    col[1] = col[1] - 1;
    
    chess[row[0]][col[0]] = 7;
    chess[row[1]][col[0]] = 7;
}

void move_right() {
    if (col[1] &gt;= 3) {
        return;
    }
    if (chess[row[0]][col[1]+1] != 0 || chess[row[1]][col[1]+1] != 0) {
        return;
    }

    chess[row[0]][col[0]] = 0;
    chess[row[1]][col[0]] = 0;

    col[0] = col[0] + 1;
    col[1] = col[1] + 1;

    chess[row[0]][col[1]] = 7;
    chess[row[1]][col[1]] = 7;
}</declaration>
		<location id="id9" x="0" y="0">
		</location>
		<init ref="id9"/>
		<transition>
			<source ref="id9"/>
			<target ref="id9"/>
			<label kind="assignment" x="-67" y="17">move_left()</label>
			<nail x="-85" y="34"/>
			<nail x="-85" y="-25"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id9"/>
			<label kind="assignment" x="17" y="38">move_down()</label>
			<nail x="34" y="76"/>
			<nail x="-25" y="76"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id9"/>
			<label kind="assignment" x="18" y="-17">move_right()</label>
			<nail x="85" y="-34"/>
			<nail x="85" y="25"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id9"/>
			<label kind="assignment" x="-24" y="-85">move_up()</label>
			<nail x="-42" y="-85"/>
			<nail x="34" y="-85"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
cc = CC();
zf = ZF2();
mc = MC3();
zy = ZY4();
hz = HZ5();
gy = GY6();
s1 = S1();
s2 = S2();
s3 = S3();
s4 = S4();
// List one or more processes to be composed into a system.
system cc, zf, mc, zy, hz, gy, s1, s2, s3, s4;
    </system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; (cc.row[0] == 3 &amp;&amp; cc.row[1] == 4 &amp;&amp; cc.col[0] == 1 &amp;&amp; cc.col[1] == 2)
</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] (cc.row[0] &gt;= 0 &amp;&amp; cc.row[1] &lt;= 4 &amp;&amp; cc.col[0] &gt;= 0 &amp;&amp; cc.col[1] &lt;= 3)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] (zf.row[0] &gt;= 0 &amp;&amp; zf.row[1] &lt;= 4 &amp;&amp; zf.col[0] &gt;= 0 &amp;&amp; zf.col[1] &lt;= 3)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] (gy.row[0] &gt;= 0 &amp;&amp; gy.row[1] &lt;= 4 &amp;&amp; gy.col[0] &gt;= 0 &amp;&amp; gy.col[1] &lt;= 3)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] (mc.row[0] &gt;= 0 &amp;&amp; mc.row[1] &lt;= 4 &amp;&amp; mc.col[0] &gt;= 0 &amp;&amp; mc.col[1] &lt;= 3)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] (hz.row[0] &gt;= 0 &amp;&amp; hz.row[1] &lt;= 4 &amp;&amp; hz.col[0] &gt;= 0 &amp;&amp; hz.col[1] &lt;= 3)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] (zy.row[0] &gt;= 0 &amp;&amp; zy.row[1] &lt;= 4 &amp;&amp; zy.col[0] &gt;= 0 &amp;&amp; zy.col[1] &lt;= 3)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] (s1.row[0] &gt;= 0 &amp;&amp; s1.row[1] &lt;= 4 &amp;&amp; s1.col[0] &gt;= 0 &amp;&amp; s1.col[1] &lt;= 3)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] (s2.row[0] &gt;= 0 &amp;&amp; s2.row[1] &lt;= 4 &amp;&amp; s2.col[0] &gt;= 0 &amp;&amp; s2.col[1] &lt;= 3)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] (s3.row[0] &gt;= 0 &amp;&amp; s3.row[1] &lt;= 4 &amp;&amp; s3.col[0] &gt;= 0 &amp;&amp; s3.col[1] &lt;= 3)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] (s4.row[0] &gt;= 0 &amp;&amp; s4.row[1] &lt;= 4 &amp;&amp; s4.col[0] &gt;= 0 &amp;&amp; s4.col[1] &lt;= 3)</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
